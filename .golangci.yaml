# This file contains all available configuration options
# with their default values.

# options for analysis running
run:
  # timeout for analysis, e.g. 30s, 5m, default is 1m
  timeout: 2m

  # exit code when at least one issue was found, default is 1
  issues-exit-code: 1

  # include test files or not, default is true
  tests: true

  modules-download-mode: readonly

  # Allow multiple parallel golangci-lint instances running.
  # If false (default) - golangci-lint acquires file lock on start.
  allow-parallel-runners: true

  skip-files: []

# output configuration options
output:
  # colored-line-number|line-number|json|tab|checkstyle|code-climate|junit-xml|github-actions
  # default is "colored-line-number"
  format: colored-line-number

  # print lines of code with issue, default is true
  print-issued-lines: true

  # print linter name in the end of issue text, default is true
  print-linter-name: true

  # make issues output unique by line, default is true
  uniq-by-line: false

  # add a prefix to the output file references; default is no prefix
  path-prefix: ""

  # sorts results by: filepath, line and column
  sort-results: false

# all available settings of specific linters
linters-settings:
  errcheck:
    # report about not checking of errors in type assertions: `a := b.(MyStruct)`;
    # default is false: such cases aren't reported by default.
    check-type-assertions: true

    # report about assignment of errors to blank identifier: `num, _ := strconv.Atoi(numStr)`;
    # default is false: such cases aren't reported by default.
    check-blank: false

  errorlint:
    # Check whether fmt.Errorf uses the %w verb for formatting errors. See the readme for caveats
    errorf: true
    # Check for plain type assertions and type switches
    asserts: true
    # Check for plain error comparisons
    comparison: true

  forbidigo:
    # Forbid the following identifiers (identifiers are written using regexp):
    forbid:
      - ^print.*$

  funlen:
    lines: 60
    statements: 40

  gocyclo:
    # minimal code complexity to report, 30 by default (but we recommend 10-20)
    min-complexity: 10

  godot:
    # comments to be checked: `declarations`, `toplevel`, or `all`
    scope: declarations
    # list of regexps for excluding particular comment lines from check
    exclude:
    # example: exclude comments which contain numbers
    # - '[0-9]+'
    # check that each sentence starts with a capital letter
    capital: false

  goheader:
    values:
      regexp:
        author: ".*"
    template: |-
      Copyright {{ YEAR-RANGE }} {{ author }}

      This program is free software: you can redistribute it and/or modify
      it under the terms of the GNU Affero General Public License as
      published by the Free Software Foundation, either version 3 of the
      License, or (at your option) any later version.

      This program is distributed in the hope that it will be useful,
      but WITHOUT ANY WARRANTY; without even the implied warranty of
      MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
      GNU Affero General Public License for more details.

      You should have received a copy of the GNU Affero General Public License
      along with this program. If not, see <https://www.gnu.org/licenses/>.

  goimports:
    # put imports beginning with prefix after 3rd-party packages;
    # it's a comma-separated list of prefixes
    local-prefixes: sci_hub_p2p

  gosec:
    excludes:
      - G401
      - G505

  gomnd:
    settings:
      mnd:
        # the list of enabled checks, see https://github.com/tommy-muehle/go-mnd/#checks for description.
        checks:
          - argument
          - case
          - operation
          - return
          - assign

  gosimple:
    # Select the Go version to target. The default is '1.13'.
    go: "1.16"
    # https://staticcheck.io/docs/options#checks
    checks: ["all"]

  importas:
    no-unaliased: true
    alias:
      - alias: ipld
        pkg: "github.com/ipfs/go-ipld-format"
      - alias: chunker
        pkg: "github.com/ipfs/go-ipfs-chunker"
      - alias: ds
        pkg: "github.com/ipfs/go-datastore"
      - alias: dshelp
        pkg: "github.com/ipfs/go-ipfs-ds-help"

  lll:
    # max line length, lines longer will be reported. Default is 120.
    # '\t' is counted as 1 character by default, and can be changed with the tab-width option
    line-length: 120
    # tab width in spaces. Default to 1.
    tab-width: 2

  maligned:
    # print struct with more effective memory layout or not, false by default
    suggest-new: true

  misspell:
    # Correct spellings using locale preferences for US or UK.
    # Default is to use a neutral variety of English.
    # Setting locale to US will correct the British spelling of 'colour' to 'color'.
    locale: US

  staticcheck:
    # Select the Go version to target. The default is '1.13'.
    go: "1.16"
    # https://staticcheck.io/docs/options#checks
    checks: ["all"]

  stylecheck:
    # Select the Go version to target. The default is '1.13'.
    go: "1.16"
    dot-import-whitelist:
      - fmt

  unused:
    # Select the Go version to target. The default is '1.13'.
    go: "1.16"

  whitespace:
    multi-if: false # Enforces newlines (or comments) after every multi-line if statement
    multi-func: false # Enforces newlines (or comments) after every multi-line function signature

  exhaustive:
    # check switch statements in generated files also
    check-generated: false
    # indicates that switch statements are to be considered exhaustive if a
    # 'default' case is present, even if all enum members aren't listed in the
    # switch
    default-signifies-exhaustive: true
  govet:
    enable-all: true
    disable:
      - shadow
  wrapcheck:
    # An array of strings that specify substrings of signatures to ignore.
    # If this set, it will override the default set of ignored signatures.
    # See https://github.com/tomarrell/wrapcheck#configuration for more information.
    ignoreSigs:
      - .Errorf(
      - errors.New(
      - errors.Unwrap(
      - .Wrap(
      - .Wrapf(
      - .WithMessage(
      - "func (*go.etcd.io/bbolt.Bucket).Delete"
      - "func (*go.etcd.io/bbolt.Bucket).Get"
      - "func (*go.etcd.io/bbolt.Bucket).Put"
      - "func (*go.etcd.io/bbolt.Tx).CreateBucketIfNotExists"
      - "func (*go.etcd.io/bbolt.DB).Batch"
      - "func (*go.etcd.io/bbolt.DB).View"
      - "func (*go.etcd.io/bbolt.Bucket).ForEach"
  
linters:
  enable-all: true
  disable:
    - wsl # noisy
    - exhaustivestruct
    - gofumpt # break import grouping
    - tagliatelle
    - prealloc # perf
    - rowserrcheck # we didn't use sql
    - scopelint
    - golint
    - maligned
    - interfacer

  fast: false

issues:
  new: false
  fix: false
  exclude-use-default: true
  exclude-rules:
    # Disable linters that are annoying in tests.
    - path: 'cmd[/\\].*'
      linters: [gochecknoglobals, gochecknoinits, goerr113, wrapcheck]

    - path: 'pkg[/\\]vars[/\\].*'
      linters: [gochecknoglobals]

    - path: 'internal[/\\]utils[/\\]file\.go'
      linters: [wrapcheck]

    - path: '.*_test\.go'
      linters: [gocritic, nlreturn]

    - path: '.*variable\.go'
      linters:
        - gochecknoglobals

    # these code are copied from external
    - path: 'internal[/\\]ipfslite[/\\].*'
      linters: [gochecknoinits, gochecknoglobals, importas, wrapcheck]

    - source: "var log"
      linters: [gochecknoglobals]
